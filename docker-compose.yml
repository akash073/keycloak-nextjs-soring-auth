version: '3.7'

# Define services
services:
  # App backend service
  keycloak-auth:
    # Configuration for building the docker image for the backend service
    build:
      context: keycloak # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - "8000:8080" # Forward the exposed port 8080 on the container to port 8000 on the host machine
    restart: always
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
     # - backend
      - front-end-student
      - front-end-teacher

  # App frontend service
  app-client-next-student:
    # Configuration for building the docker image for the backend service
    build:
      context: front-end-student # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - "3000:3000" # Forward the exposed port 8080 on the container to port 8000 on the host machine
    restart: always
    depends_on:
      #- app-server # This service depends on mysql. Start that first.
      - keycloak-auth # This service depends on mysql. Start that first.
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - front-end-student

   # App frontend service
  app-client-next-teacher:
    # Configuration for building the docker image for the backend service
    build:
      context: front-end-teacher # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - "3001:3001" # Forward the exposed port 8080 on the container to port 8000 on the host machine
    restart: always
    depends_on:
      #- app-server # This service depends on mysql. Start that first.
      - keycloak-auth # This service depends on mysql. Start that first.
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - front-end-teacher

# Volumes
volumes:
  db-data:

# Networks to be created to facilitate communication between containers
networks:
  #backend:
  front-end-student: 
  front-end-teacher: 
